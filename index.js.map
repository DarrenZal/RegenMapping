{"mappings":"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","sources":["docs/app.js"],"sourcesContent":["import SpriteText from 'three-spritetext';\n\n// Regen Mapping - Interactive Schema Visualization\n// Uses 3d-force-graph for the network visualization\n\nclass RegenMappingApp {\n    constructor() {\n        this.graph = null;\n        this.currentProfile = null;\n        this.currentSchema = 'unified';\n        this.expandedNode = null;\n        this.profiles = {};\n        this.schemaNodes = [];\n        this.activeSchemaNode = null;\n        this.cambria = new CambriaBrowser();\n        this.cambriaReady = false;\n        \n        this.init();\n    }\n\n    async init() {\n        try {\n            // Initialize Cambria lenses first\n            console.log('🎯 Initializing Cambria lenses...');\n            this.cambriaReady = await this.cambria.initializeLenses();\n            \n            await this.loadProfiles();\n            this.setupGraph();\n            this.setupEventListeners();\n            this.hideLoading();\n        } catch (error) {\n            console.error('Failed to initialize app:', error);\n            this.showError('Failed to load data. Please try again later.');\n        }\n    }\n\n    async loadProfiles() {\n        // Try to load from Murmurations index first\n        try {\n            await this.loadFromMurmurationsIndex();\n        } catch (error) {\n            console.warn('Failed to load from Murmurations index:', error);\n        }\n\n        // If no profiles loaded from Murmurations, try GitHub URLs as fallback\n        if (Object.keys(this.profiles).length === 0) {\n            console.log('📁 No profiles from Murmurations index, loading from GitHub...');\n            await this.loadFromGitHub();\n        }\n\n        if (Object.keys(this.profiles).length === 0) {\n            throw new Error('No profiles could be loaded from any source');\n        }\n    }\n\n    async loadFromMurmurationsIndex() {\n        // Query the Murmurations test index for the basic Murmurations schemas\n        const queries = [\n            // Get all people profiles using the basic Murmurations people schema\n            'https://test-index.murmurations.network/v2/nodes?schema=people_schema-v0.1.0',\n            // Get all organization profiles using the basic Murmurations organizations schema\n            'https://test-index.murmurations.network/v2/nodes?schema=organizations_schema-v1.0.0'\n        ];\n\n        // Our specific profile URLs to filter for\n        const ourProfileUrls = [\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-dylan-tull.json',\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-karen-obrien.json',\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-org-global-regenerative-coop.json'\n        ];\n\n        for (const queryUrl of queries) {\n            try {\n                console.log(`🔍 Querying: ${queryUrl}`);\n                const response = await fetch(queryUrl);\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(`📊 Found ${result.data?.length || 0} profiles in total`);\n                    \n                    if (result.data && result.data.length > 0) {\n                        // Filter for our specific profiles\n                        const ourProfiles = result.data.filter(node => \n                            ourProfileUrls.some(url => node.profile_url.includes('DarrenZal/RegenMapping'))\n                        );\n                        \n                        console.log(`📊 Found ${ourProfiles.length} of our profiles`);\n                        \n                        // Load our filtered profiles\n                        for (const node of ourProfiles) {\n                            try {\n                                console.log(`🔍 Loading profile from: ${node.profile_url}`);\n                                const profileResponse = await fetch(node.profile_url);\n                                if (profileResponse.ok) {\n                                    const profile = await profileResponse.json();\n                                    const id = this.generateProfileId(profile.name);\n                                    \n                                    // Skip if we already have this profile\n                                    if (this.profiles[id]) continue;\n                                    \n                                    this.profiles[id] = {\n                                        murmurations: profile,\n                                        unified: await this.convertToUnified(profile),\n                                        schemaorg: await this.convertToSchemaOrg(profile)\n                                    };\n                                    console.log(`✅ Loaded from Murmurations: ${profile.name}`);\n                                }\n                            } catch (profileError) {\n                                console.warn(`Failed to load individual profile:`, profileError);\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                console.warn(`Failed to query Murmurations for ${queryUrl}:`, error);\n            }\n        }\n        \n        console.log(`🎉 Total profiles loaded: ${Object.keys(this.profiles).length}`);\n    }\n\n    async loadFromGitHub() {\n        // Fallback: Load the Murmurations profiles from the repository\n        const profileUrls = [\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-dylan-tull.json',\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-karen-obrien.json',\n            'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-org-global-regenerative-coop.json'\n        ];\n\n        for (const url of profileUrls) {\n            try {\n                const response = await fetch(url);\n                if (response.ok) {\n                    const profile = await response.json();\n                    const id = this.extractProfileId(url);\n                    this.profiles[id] = {\n                        murmurations: profile,\n                        unified: await this.convertToUnified(profile),\n                        schemaorg: await this.convertToSchemaOrg(profile)\n                    };\n                    console.log(`✅ Loaded from GitHub: ${profile.name}`);\n                }\n            } catch (error) {\n                console.warn(`Failed to load profile from ${url}:`, error);\n            }\n        }\n    }\n\n    generateProfileId(name) {\n        return name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');\n    }\n\n    extractProfileId(url) {\n        return url.split('/').pop().replace('.json', '');\n    }\n\n    async convertToUnified(murmProfile) {\n        if (!this.cambriaReady) {\n            throw new Error('Cambria lenses not loaded - cannot convert to unified format');\n        }\n        \n        console.log('🎯 Using Cambria for Murmurations → Unified conversion');\n        return this.cambria.convertSchema(murmProfile, 'murmurations', 'unified');\n    }\n\n    async convertToSchemaOrg(murmProfile) {\n        if (!this.cambriaReady) {\n            throw new Error('Cambria lenses not loaded - cannot convert to Schema.org format');\n        }\n        \n        console.log('🎯 Using Cambria for Murmurations → Schema.org conversion');\n        return this.cambria.convertSchema(murmProfile, 'murmurations', 'schemaorg');\n    }\n\n\n\n    setupGraph() {\n        const graphData = this.generateGraphData();\n        \n        this.graph = ForceGraph3D()\n            (document.getElementById('graph'))\n            .graphData(graphData)\n            .nodeLabel(node => {\n                // Only show hover labels for non-active nodes\n                if (node.id === this.expandedNode || node.id === this.activeSchemaNode) {\n                    return null; // Active nodes will use nodeThreeObject for labels\n                }\n                return node.name;\n            })\n            // Always show labels for active nodes\n            .nodeThreeObject(node => {\n                // Only create custom objects for active nodes\n                if (node.id === this.expandedNode || node.id === this.activeSchemaNode) {\n                    // Use the built-in sprite text from ForceGraph\n                    const sprite = new SpriteText(node.name);\n                    sprite.color = 'white';\n                    sprite.textHeight = 8;\n                    sprite.position.y = 10; // Position above the node\n                    return sprite;\n                }\n                return null; // Use default rendering for non-active nodes\n            })\n            .nodeColor(node => this.getNodeColor(node))\n            .nodeVal(node => node.size || 4)\n            .linkColor(link => this.getLinkColor(link))\n            .linkWidth(2)\n            .linkLabel(link => link.label || '')\n            .linkDirectionalArrowLength(link => link.type && link.type !== 'schema-link' && link.type !== 'lens' ? 3 : 0)\n            .linkDirectionalArrowRelPos(0.8) // Position arrows closer to target to avoid overlap\n            .linkDirectionalArrowColor(() => 'rgba(255, 255, 255, 0.8)')\n            .backgroundColor('rgba(0,0,0,0)')\n            .onNodeClick(this.handleNodeClick.bind(this))\n            .onNodeDragEnd(node => {\n                node.fx = node.x;\n                node.fy = node.y;\n                node.fz = node.z;\n            });\n\n        // Set initial camera position (no auto-rotation)\n        this.graph.cameraPosition({ z: 300 });\n    }\n\n    generateGraphData() {\n        const nodes = [];\n        const links = [];\n        const processedRelationships = new Set();\n\n        // Create main profile nodes\n        Object.keys(this.profiles).forEach(profileId => {\n            const profile = this.profiles[profileId];\n            nodes.push({\n                id: profileId,\n                name: profile.murmurations.name,\n                type: 'profile',\n                size: 8,\n                profile: profile\n            });\n        });\n\n        // Create links based on relationships in the profiles\n        Object.keys(this.profiles).forEach(profileId => {\n            const profile = this.profiles[profileId];\n            const relationships = profile.murmurations.relationships || [];\n            \n            relationships.forEach(rel => {\n                // Find the target profile by name\n                const targetProfileId = Object.keys(this.profiles).find(id => \n                    this.profiles[id].murmurations.name === rel.target\n                );\n                \n                if (targetProfileId) {\n                    // Create a unique key for this relationship to avoid duplicates\n                    const relationshipKey = [profileId, targetProfileId].sort().join('-');\n                    \n                    if (!processedRelationships.has(relationshipKey)) {\n                        processedRelationships.add(relationshipKey);\n                        \n                        links.push({\n                            source: profileId,\n                            target: targetProfileId,\n                            type: rel.type,\n                            description: rel.description,\n                            label: `${rel.type}: ${rel.description}`\n                        });\n                    }\n                }\n            });\n        });\n\n        return { nodes, links };\n    }\n\n    getNodeColor(node) {\n        if (node.type === 'schema') {\n            // Active schema node is green, others are light gray\n            if (node.id === this.activeSchemaNode) {\n                return '#2ecc71'; // Green for active schema\n            } else {\n                return '#bdc3c7'; // Light gray for inactive schemas\n            }\n        }\n        \n        if (node.type === 'profile') {\n            // Determine if this is an organization or person\n            const isOrganization = node.profile && node.profile.murmurations.linked_schemas && \n                node.profile.murmurations.linked_schemas.some(schema => schema.includes('organizations_schema'));\n            \n            if (node.id === this.expandedNode) {\n                // Active profile colors - dark blue for both people and organizations\n                return '#2980b9'; // Dark blue for active profiles\n            } else {\n                // Inactive profile colors - light blue for both people and organizations\n                return '#85c1e9'; // Light blue for inactive profiles\n            }\n        }\n        \n        return '#9b59b6'; // Fallback purple\n    }\n\n    getLinkColor(link) {\n        // Handle schema transformation flow\n        if (link.type === 'lens' && this.activeSchemaNode) {\n            // Check if this link connects to the active schema node\n            if (link.target.id === this.activeSchemaNode || link.source.id === this.activeSchemaNode) {\n                return '#2ecc71'; // Green flow to/from active schema\n            }\n        }\n        \n        const colors = {\n            'member': '#2ecc71',      // Green for membership\n            'advisor': '#3498db',     // Blue for advisory\n            'collaboration': '#e67e22', // Orange for collaboration\n            'schema-link': 'rgba(255, 255, 255, 0.4)',\n            'lens': 'rgba(255, 255, 255, 0.3)' // Dimmer for inactive lens connections\n        };\n        return colors[link.type] || 'rgba(255, 255, 255, 0.6)';\n    }\n\n    handleNodeClick(node) {\n        if (node.type === 'schema') {\n            this.handleSchemaNodeClick(node);\n        } else if (node.type === 'profile') {\n            this.handleProfileNodeClick(node);\n        }\n    }\n\n    handleProfileNodeClick(node) {\n        if (this.expandedNode === node.id) {\n            // Collapse the node\n            this.collapseNode();\n        } else {\n            // Expand the node\n            this.expandNode(node);\n        }\n        \n        this.showProfile(node.profile);\n    }\n\n    handleSchemaNodeClick(schemaNode) {\n        // Set the active schema node for visual flow effect\n        this.activeSchemaNode = schemaNode.id;\n        this.currentSchema = schemaNode.schema;\n        this.updateSchemaButtons();\n        \n        // Update the graph colors to show the flow\n        this.updateGraphColors();\n        \n        if (this.currentProfile) {\n            this.displayProfile(this.currentProfile, this.currentSchema);\n        }\n    }\n\n    expandNode(node) {\n        // Remove existing schema nodes\n        this.collapseNode();\n        \n        this.expandedNode = node.id;\n        \n        // Set the default active schema to unified\n        this.activeSchemaNode = `${node.id}-unified`;\n        \n        // Create schema nodes around the main node\n        const schemaTypes = ['murmurations', 'unified', 'schemaorg'];\n        const radius = 30;\n        \n        schemaTypes.forEach((schema, index) => {\n            const angle = (index * 2 * Math.PI) / schemaTypes.length;\n            const schemaNode = {\n                id: `${node.id}-${schema}`,\n                name: schema.charAt(0).toUpperCase() + schema.slice(1),\n                type: 'schema',\n                schema: schema,\n                size: 4,\n                fx: node.x + radius * Math.cos(angle),\n                fy: node.y + radius * Math.sin(angle),\n                fz: node.z\n            };\n            \n            this.schemaNodes.push(schemaNode);\n        });\n\n        // Create links between main node and schema nodes\n        const schemaLinks = this.schemaNodes.map(schemaNode => ({\n            source: node.id,\n            target: schemaNode.id,\n            type: 'schema-link'\n        }));\n\n        // Create links between schema nodes (representing Cambria lenses) with descriptive labels\n        const lensLinks = [\n            { \n                source: `${node.id}-murmurations`, \n                target: `${node.id}-unified`, \n                type: 'lens',\n                label: 'lens: murmurations→unified'\n            },\n            { \n                source: `${node.id}-unified`, \n                target: `${node.id}-schemaorg`, \n                type: 'lens',\n                label: 'lens: unified→schemaorg'\n            },\n            { \n                source: `${node.id}-murmurations`, \n                target: `${node.id}-schemaorg`, \n                type: 'lens',\n                label: 'lens: murmurations→schemaorg'\n            }\n        ];\n\n        // Update graph data\n        const currentData = this.graph.graphData();\n        this.graph.graphData({\n            nodes: [...currentData.nodes, ...this.schemaNodes],\n            links: [...currentData.links, ...schemaLinks, ...lensLinks]\n        });\n        \n        // Update colors to show the default active schema\n        this.updateGraphColors();\n    }\n\n    collapseNode() {\n        if (!this.expandedNode) return;\n        \n        const currentData = this.graph.graphData();\n        \n        // Remove schema nodes and their links\n        const filteredNodes = currentData.nodes.filter(n => \n            !this.schemaNodes.some(sn => sn.id === n.id)\n        );\n        \n        const filteredLinks = currentData.links.filter(l => \n            !this.schemaNodes.some(sn => sn.id === l.source.id || sn.id === l.target.id) &&\n            l.type !== 'schema-link' && l.type !== 'lens'\n        );\n        \n        this.graph.graphData({\n            nodes: filteredNodes,\n            links: filteredLinks\n        });\n        \n        this.schemaNodes = [];\n        this.expandedNode = null;\n    }\n\n    showProfile(profile) {\n        this.currentProfile = profile;\n        this.displayProfile(profile, this.currentSchema);\n        this.openSidebar();\n    }\n\n    displayProfile(profile, schema) {\n        const data = profile[schema];\n        const content = document.getElementById('profile-content');\n        \n        let html = `\n            <div class=\"profile-header\">\n                <h2>${this.getDisplayName(data)}</h2>\n                <div class=\"subtitle\">${schema.charAt(0).toUpperCase() + schema.slice(1)} Schema Format</div>\n            </div>\n        `;\n\n        // Display fields based on schema type\n        if (schema === 'murmurations') {\n            html += this.renderMurmurationsFields(data);\n        } else if (schema === 'unified') {\n            html += this.renderUnifiedFields(data);\n        } else if (schema === 'schemaorg') {\n            html += this.renderSchemaOrgFields(data);\n        }\n\n        content.innerHTML = html;\n    }\n\n    getDisplayName(data) {\n        return data.name || 'Unknown';\n    }\n\n    renderMurmurationsFields(data) {\n        let html = '';\n        \n        if (data.primary_url) {\n            html += this.renderField('Primary URL', `<a href=\"${data.primary_url}\" target=\"_blank\">${data.primary_url}</a>`);\n        }\n        \n        if (data.locality) {\n            html += this.renderField('Location', `${data.locality}, ${data.region || ''} ${data.country_name || ''}`.trim());\n        }\n        \n        if (data.tags && data.tags.length > 0) {\n            html += this.renderField('Tags', data.tags.join(', '));\n        }\n        \n        if (data.geolocation) {\n            html += this.renderField('Coordinates', `${data.geolocation.lat}, ${data.geolocation.lon}`);\n        }\n\n        if (data.relationships && data.relationships.length > 0) {\n            const relationshipsHtml = data.relationships.map((rel, index) => \n                `<div class=\"relationship-item\">\n                    <strong>${rel.type}</strong>: <a href=\"#\" class=\"profile-link\" data-target=\"${rel.target}\">${rel.target}</a>\n                    <br><em>${rel.description}</em>\n                </div>`\n            ).join('');\n            html += this.renderField('Relationships', relationshipsHtml);\n        }\n\n        // Add profile source link\n        html += this.renderProfileSource(data.name);\n\n        return html;\n    }\n\n    renderUnifiedFields(data) {\n        let html = '';\n        \n        if (data['murm:primary_url']) {\n            html += this.renderField('Primary URL', `<a href=\"${data['murm:primary_url']}\" target=\"_blank\">${data['murm:primary_url']}</a>`);\n        }\n        \n        if (data['regen:locality']) {\n            html += this.renderField('Locality', data['regen:locality']);\n        }\n        \n        if (data['regen:domainTags'] && data['regen:domainTags'].length > 0) {\n            html += this.renderField('Domain Tags', data['regen:domainTags'].join(', '));\n        }\n        \n        if (data['@type']) {\n            html += this.renderField('Type', Array.isArray(data['@type']) ? data['@type'].join(', ') : data['@type']);\n        }\n\n        if (data['regen:relationships'] && data['regen:relationships'].length > 0) {\n            const relationshipsHtml = data['regen:relationships'].map(rel => \n                `<div class=\"relationship-item\">\n                    <strong>${rel.type}</strong>: <a href=\"#\" class=\"profile-link\" data-target=\"${rel.target}\">${rel.target}</a>\n                    <br><em>${rel.description}</em>\n                </div>`\n            ).join('');\n            html += this.renderField('Relationships', relationshipsHtml);\n        }\n\n        // Add profile source link\n        html += this.renderProfileSource(this.getDisplayName(data));\n\n        return html;\n    }\n\n    renderSchemaOrgFields(data) {\n        let html = '';\n        \n        if (data.url) {\n            html += this.renderField('URL', `<a href=\"${data.url}\" target=\"_blank\">${data.url}</a>`);\n        }\n        \n        // Handle both homeLocation (Person) and location (Organization)\n        const locationData = data.homeLocation || data.location;\n        if (locationData) {\n            const locationStr = [\n                locationData.addressLocality,\n                locationData.addressRegion,\n                locationData.addressCountry\n            ].filter(Boolean).join(', ');\n            const locationLabel = data['@type'] === 'Organization' ? 'Location' : 'Home Location';\n            html += this.renderField(locationLabel, locationStr);\n        }\n        \n        if (data['@type']) {\n            html += this.renderField('Schema Type', data['@type']);\n        }\n\n        // Add profile source link\n        html += this.renderProfileSource(data.name);\n\n        return html;\n    }\n\n    renderField(label, value) {\n        return `\n            <div class=\"field-group\">\n                <div class=\"field-label\">${label}</div>\n                <div class=\"field-value\">${value}</div>\n            </div>\n        `;\n    }\n\n    renderProfileSource(profileName) {\n        console.log(`🔍 renderProfileSource called with name: \"${profileName}\", schema: ${this.currentSchema}`);\n        \n        // Handle undefined or null profile names\n        if (!profileName) {\n            console.log('❌ Profile name is undefined or null');\n            return this.renderField('Profile Source', 'Source information not available (no name)');\n        }\n        \n        // Find the current profile by name\n        let currentProfileId = null;\n        let murmurationsName = null;\n        \n        // Debug: Log all profiles\n        console.log('📋 All profiles:');\n        for (const id in this.profiles) {\n            const profile = this.profiles[id];\n            console.log(`  • ID: ${id}`);\n            console.log(`    • Murmurations name: \"${profile.murmurations.name}\"`);\n            console.log(`    • Unified name: \"${profile.unified.name}\"`);\n            console.log(`    • SchemaOrg name: \"${profile.schemaorg.name}\"`);\n        }\n        \n        // Loop through all profiles to find the current one\n        for (const id in this.profiles) {\n            const profile = this.profiles[id];\n            \n            // Check if this is the current profile based on the current schema\n            if (this.currentSchema === 'unified' && profile.unified.name === profileName) {\n                console.log(`✅ Found matching unified profile: ${id}`);\n                currentProfileId = id;\n                murmurationsName = profile.murmurations.name;\n                break;\n            } else if (this.currentSchema === 'murmurations' && profile.murmurations.name === profileName) {\n                console.log(`✅ Found matching murmurations profile: ${id}`);\n                currentProfileId = id;\n                murmurationsName = profile.murmurations.name;\n                break;\n            } else if (this.currentSchema === 'schemaorg' && profile.schemaorg.name === profileName) {\n                console.log(`✅ Found matching schemaorg profile: ${id}`);\n                currentProfileId = id;\n                murmurationsName = profile.murmurations.name;\n                break;\n            }\n        }\n        \n        // If we couldn't find the profile, use the name as is\n        if (!currentProfileId) {\n            console.log(`❌ No matching profile found for name: \"${profileName}\"`);\n            currentProfileId = this.generateProfileId(profileName);\n            murmurationsName = profileName;\n        }\n        \n        // Generate GitHub URL based on profile name and current schema\n        let githubUrl;\n        \n        // Different URL patterns based on schema type\n        if (this.currentSchema === 'murmurations') {\n            // Handle specific cases for Murmurations\n            if (murmurationsName === 'Dylan Tull') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-dylan-tull.json';\n            } else if (murmurationsName === 'Dr. Karen O\\'Brien') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-person-karen-obrien.json';\n            } else if (murmurationsName === 'Global Regenerative Cooperative') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/murmurations/murm-org-global-regenerative-coop.json';\n            } else {\n                // Generic case\n                githubUrl = 'https://github.com/DarrenZal/RegenMapping/tree/main/profiles/murmurations/';\n            }\n        } else if (this.currentSchema === 'unified') {\n            // Handle specific cases for Unified\n            if (murmurationsName === 'Dylan Tull') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/unified/regen-person-dylan-tull.jsonld';\n            } else if (murmurationsName === 'Dr. Karen O\\'Brien') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/unified/regen-person-karen-obrien.jsonld';\n            } else if (murmurationsName === 'Global Regenerative Cooperative') {\n                githubUrl = 'https://raw.githubusercontent.com/DarrenZal/RegenMapping/main/profiles/unified/regen-org-global-regenerative-coop.jsonld';\n            } else {\n                // Generic case\n                githubUrl = 'https://github.com/DarrenZal/RegenMapping/tree/main/profiles/unified/';\n            }\n        } else if (this.currentSchema === 'schemaorg') {\n            // For Schema.org, we don't have actual files, so we'll point to the converter\n            githubUrl = 'https://github.com/DarrenZal/RegenMapping/blob/main/cambria-lenses/README.md';\n            return this.renderField('Profile Source', `<a href=\"${githubUrl}\" target=\"_blank\">View Cambria Conversion Lenses on GitHub</a>`);\n        } else {\n            return this.renderField('Profile Source', 'Source information not available');\n        }\n        \n        return this.renderField('Profile Source', `<a href=\"${githubUrl}\" target=\"_blank\">View Raw Profile on GitHub</a>`);\n    }\n\n    setupEventListeners() {\n        // Schema button listeners\n        document.querySelectorAll('.schema-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                this.currentSchema = e.target.dataset.schema;\n                this.updateSchemaButtons();\n                \n                // Update the active schema node to match the selected schema format\n                if (this.expandedNode) {\n                    this.activeSchemaNode = `${this.expandedNode}-${this.currentSchema}`;\n                    this.updateGraphColors();\n                }\n                \n                if (this.currentProfile) {\n                    this.displayProfile(this.currentProfile, this.currentSchema);\n                }\n            });\n        });\n        \n        // Profile link listeners (using event delegation)\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('profile-link')) {\n                e.preventDefault();\n                const targetName = e.target.dataset.target;\n                if (targetName) {\n                    this.navigateToProfile(targetName);\n                }\n            }\n        });\n    }\n\n    updateSchemaButtons() {\n        document.querySelectorAll('.schema-btn').forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.schema === this.currentSchema);\n        });\n    }\n\n    updateGraphColors() {\n        // Force the graph to re-evaluate node and link colors\n        if (this.graph) {\n            this.graph\n                .nodeColor(node => this.getNodeColor(node))\n                .linkColor(link => this.getLinkColor(link));\n        }\n    }\n\n    openSidebar() {\n        document.getElementById('sidebar').classList.add('open');\n    }\n\n    navigateToProfile(profileName) {\n        console.log(`🔍 Navigating to profile: \"${profileName}\"`);\n        \n        // Debug: List all available profile names\n        const availableNames = Object.keys(this.profiles).map(id => \n            `${id}: \"${this.profiles[id].murmurations.name}\"`\n        );\n        console.log('📋 Available profiles:', availableNames);\n        \n        // Find the profile by name\n        const profileId = Object.keys(this.profiles).find(id => \n            this.profiles[id].murmurations.name === profileName\n        );\n        \n        console.log(`🎯 Found profile ID: ${profileId}`);\n        \n        if (profileId) {\n            // Find the node in the graph\n            const currentData = this.graph.graphData();\n            const targetNode = currentData.nodes.find(node => node.id === profileId);\n            \n            console.log(`📍 Found target node:`, targetNode ? targetNode.name : 'Not found');\n            \n            if (targetNode) {\n                // Expand the target node and show its profile\n                this.expandNode(targetNode);\n                this.showProfile(targetNode.profile);\n                \n                // Focus the camera on the target node\n                this.graph.cameraPosition(\n                    { x: targetNode.x, y: targetNode.y, z: targetNode.z + 100 }, // position\n                    { x: targetNode.x, y: targetNode.y, z: targetNode.z }, // lookAt\n                    1000 // transition duration\n                );\n            } else {\n                console.error(`❌ Target node not found for profile ID: ${profileId}`);\n            }\n        } else {\n            console.error(`❌ Profile not found for name: \"${profileName}\"`);\n        }\n    }\n\n    hideLoading() {\n        const loading = document.querySelector('.loading');\n        if (loading) {\n            loading.style.display = 'none';\n        }\n    }\n\n    showError(message) {\n        const graphContainer = document.getElementById('graph');\n        graphContainer.innerHTML = `\n            <div class=\"loading\">\n                <p style=\"color: #e74c3c;\">❌ ${message}</p>\n            </div>\n        `;\n    }\n}\n\n// Global functions for HTML event handlers\nwindow.closeSidebar = function() {\n    document.getElementById('sidebar').classList.remove('open');\n}\n\n// Global app instance for onclick handlers\nlet app;\n\n// Initialize the app when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    app = new RegenMappingApp();\n});\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}